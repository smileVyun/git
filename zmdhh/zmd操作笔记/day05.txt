一、安装部署Tomcat服务器
web1:
    1,安装jdk,Tomcat
    # yum –y install  java-1.8.0-openjdk   
    # yum -y install java-1.8.0-openjdk-headless 

    # tar -xf  apache-tomcat-8.0.30.tar.gz
    # mv apache-tomcat-8.0.30  /usr/local/tomcat
    # ls /usr/local/tomcat
    bin/                //主程序目录
    lib/                //库文件目录
    logs/               //日志目录  
    temp/               //临时目录
    work/               //自动编译目录jsp代码转换servlet
    conf/               //配置文件目录
    webapps/            //页面目录

    如果检查端口时，8005端口启动非常慢,打以下命令
    # mv /dev/random  /dev/random.bak
    # ln -s /dev/urandom  /dev/random

    重起服务
    # /usr/local/tomcat/bin/shutdown.sh
    # /usr/local/tomcat/bin/startup.sh


二、使用Tomcat部署虚拟主机
    1)改配置文件
    # vim /usr/local/tomcat/conf/server.xml
    <Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
    </Host>
    2)写地主库文件
    # mkdir -p  /usr/local/tomcat/a/ROOT
    # echo "AAA"   > /usr/local/tomcat/a/ROOT/index.html
    3)重启Tomcat服务器
    # /usr/local/tomcat/bin/shutdown.sh
    # /usr/local/tomcat/bin/startup.sh

proxy:
    # vim /etc/hosts
    192.168.2.100      www.a.com  www.b.com

    # firefox http://www.a.com:8080/


步骤一：修改www.b.com网站的首页目录为base
    # vim /usr/local/tomcat/conf/server.xml
    <Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
    <Context path="" docBase="base" reloadable="true"/>
    </Host>

    # mkdir  /usr/local/tomcat/b/base
    # echo "BASE" > /usr/local/tomcat/b/base/index.html
    重起服务

步骤二：跳转网页
    # vim /usr/local/tomcat/conf/server.xml
    <Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
    <Context path="/test" docBase="/var/www/html/" />
    </Host>

    # echo "Test" > /var/www/html/index.html
    重起服务

步骤四：配置Tomcat支持SSL加密网站
    1）创建加密用的私钥和证书文件
    # keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore          
    //-genkeypair     生成密钥对
    //-alias tomcat   密钥别名
    //-keyalg RSA     定义密钥算法为RSA算法
    //-keystore       定义密钥文件存储在:/usr/local/tomcat/keystore

    2)修改配置文件，创建加密连接的Connector
    # vim /usr/local/tomcat/conf/server.xml
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
    maxThreads="150"  SSLEnabled="true"  scheme="https"  secure="true"
    keystoreFile="/usr/local/tomcat/keystore"  keystorePass="123456"
    clientAuth="false"  sslProtocol="TLS" />
    重起服务

步骤四：配置Tomcat日志
    # vim /usr/local/tomcat/conf/server.xml
    <Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
    <Context path="/test" docBase="/var/www/html/" />
    <Valve className="org.apache.catalina.valves.AccessLogValve"
            directory="logs"
            prefix=" aa_access" suffix=".txt"
	    pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    </Host>
    注：复制<Valve这段，改名字prefix 拓展名suffix
    重起服务

步骤五：配置Tomcat集群
    [root@proxy ~]# vim  /usr/local/nginx/conf/nginx.conf
    http{
    upstream toms {
        server 192.168.2.100:8080;
        server 192.168.2.200:8080;
    }
    server  {
        listen 80;
        server_name localhost;
        location / {
            proxy_pass  http://toms;
        }
      }
    }
    重起服务  
 
    web1 web2 做Tomcat页面

  
三、使用Varnish加速Web
    web1 做个httpd页面

proxy上：
    部署Varnish缓存服务器
    # yum -y install gcc readline-devel 
    # yum -y install ncurses-devel 
    # yum -y install pcre-devel
    # yum -y install python-docutils-0.11-0.2.20130715svn7687.el7.noarch.rpm
    
    配置 解压 安装源码包
    # cp  /root/varnish-5.2.1/etc/example.vcl  /usr/local/etc/default.vcl 
    # 复制启动脚本和配置文件

    # vim  /usr/local/etc/default.vcl            # 修改代理配置文件
    backend default {
         .host = "192.168.2.100";
	 .port = "80";
    }
    注：要先将nginx关闭

    # varnishd  -f /usr/local/etc/default.vcl    # 重起服务

varnish的其他命令：
    varnishd –s malloc,128M        定义varnish使用内存作为缓存，空间为128M
    varnishd –s file,/var/lib/varnish_storage.bin,1G 定义varnish使用文件作为缓存(文件名可以随便写,1G为定义的文件大小)
    # varnishlog       查看详细varnish日志
    # varnishncsa      查看简短varnish日志

    # varnishadm  
    varnish> ban req.url ~ .*
    清空缓存数据，支持正则表达式







  


















