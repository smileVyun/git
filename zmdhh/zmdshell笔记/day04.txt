一、字符串截取及切割     1,第一种截取方式${变量名:起始位置:长度}   # phone=12345678998   # echo ${phone:1:8}    23456789                        # phone为变量名                       # 1为从第几个字符开始取值 0可以不写，记作${变量名::长度}                       # 8为取值的长度   		       注：第一位起始位置从0开始  2，第二种截取方式expr substr "$变量名" 起始位置 长度   # phone=12345678998   # expr substr "$phone" 2 3   234  3，第三种截取方式echo $变量名 | cut -b 起始位置-结束位置    # phone=12345678998    # echo $phone | cut -b 3-6  #取3-6位    3456    # echo $phone | cut -b 4    #取第4位     4    # echo $phone | cut -b 8-   #取第8位到末尾    8998    # echo $phone | cut -b 2,4,10  #取第2位，第4位，第10位    249   # c=11   # echo $c    11   # nb=$c   # echo $nb    11   # c=22   # nb=$nb$c   # echo $nb    1122   # c=33   # nb=$nb$c   # echo $nb    112233     #!/bin/bash    x=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789    pass=""    for i in {1..8}     do    cc=$[RANDOM%62]    dd=${x:$cc:1}    pass=$pass$dd     done    echo $pass二、字符串的操作   1，字符串的替换${var/old/new}   # echo $phone   12345678998   # echo ${phone/8/z}   # 8换成z  从左往右第一个替换   1234567z998   # echo ${phone//9/q}  # 9全换成q   (/为删除一个，//为删除所有)   12345678qq8   2，字符串的匹配删除   1) #为从左往右删除${var#*:}   # echo $A   root:x:0:0:root:/root:/bin/bash   # echo ${A#root:}   x:0:0:root:/root:/bin/bash   # echo ${A#roo}   t:x:0:0:root:/root:/bin/bash   # echo ${A#*:}   x:0:0:root:/root:/bin/bash   # echo ${A##*:}   # 删除*:前的所有   /bin/bash   2)%为从右往左删除${var%:*}   # echo ${A%%:*}  # %位删除1个  %%为删除所有   root   #!/bin/bash     for i in `ls /op`     do       mv /op/$i /op/${i%.doc}.txt     done  3,字符串初值的处理   1)赋值   ${变量:-值}   # echo $x    # 没有的变量就赋一个值   159   # echo ${x:-123}   159   # echo ${xx:-123}   123   求和的脚本   #!/bin/bash   read -p "请输入你要求和的数字:" x   sum=0   i=1   x=${x:-10}   for i in `seq $x`    do      he=$[sum+i]   let sum+=i   let i++   done   echo "值为$he"   4,数组   # oo=(55 66 77)   # echo ${oo[2]}   #第一个默认从0开始计算   77   # echo ${oo[*]}   55 66 77   # echo ${oo[*]:1:2}   66 77三、expect预期交互   # mail -s suiji root << EOF   xxx   hhh   dd   EOF     #!/bin/bash   expect<<EOF   set timeout 80     # 超时时间可自行设定   spawn ssh 172.25.0.10   expect "password"  {send "redhat\n"}   expect "#"         {send "mkdir /lailo\n"}   expect "#"         {send "exit\n"}   # 这行其实不执行   EOF   如果不希望ssh时出现yes/no的提示，远程时使用如下选项:   # ssh -o StrictHostKeyChecking=no server0  (server0可写为ip地址)四、正则表达式   grep "ba*"  a.txt   # * 匹配前一个字符任意次数 *不能单独使用   查到的内容可能为 baa baaa baaaa baaaa   grep 'a\{3,5}' 文件 # 查找a字符出现3-5的内容   如果文件内有：   aa   a   aaa   aaaa   bbb   则匹配到的内容为 aaa  aaaa   grep 'a\{3\}' 文件 # 查找出现3次a的内容   grep 'a\{3,\}' 文件 # 查找出现3次a以上的内容       扩展正则表：    +          最少匹配1次    ?          最多匹配1次       {n,m}    匹配n到m次    （ ）      组合成一个整体     |          或者（=or）    \b       例：  # grep the aa.txt       abcthe       thewxy       ootheppp       llx the find     # egrep "\bthe\b" aa.txt        llx the find     # egrep "\bthe" aa.txt   #查the的左边没有 右边随意的内容       thewxy       llx the find              